#!/bin/bash
set -o pipefail
#
# This script processes a list of domains to check which nameservers
# are used. If a list of IPs is given it will also check if the
# IPs are pointing to the domain or not.
#

green='\033[0;32m'
red='\033[0;31m'
yellow='\033[0;33m'
nc='\033[0m' #no color
output_dir=result-$(date +%F)

#default user
user=root

usage() {
   cat << HEREDOC

   Usage: $(basename "$0") [-d domain.list]

   optional arguments:
     -h, --help           show this help message and exit
     -o, --output-dir DIR directory to store results in
     -i, --ipv4list FILE  file containing ipv4 addresses per line
     -6, --ipv6list FILE  file containing ipv6 addresses per line
     -s, --server HOST    plesk or directadmin server to pull domain list from
     -u, --user USER      username used to connect to the server

HEREDOC
	exit 0
}

check_file_existence() {
	if [[ ! -f "$1" ]]; then
		echo "File '${1}' does not exist"
		exit 1
	fi
}

make_output_dir() {
	declare output_dir="$1"
	if [[ -d "$output_dir" ]]; then
		while read -r -p "Output dir '$(basename "$output_dir")' exists, remove it and start over? (y/n) " answer
		do
			case ${answer:0:1} in
				y|Y ) rm -rf "$output_dir"; main;;
				n|N ) exit 0;;
				* ) echo "Please answer yes or no.";;
			esac
		done

	else
		mkdir -p "$output_dir"
		cd "$output_dir"||(echo "Error: Cannot cd into $output_dir" && exit 1)
	fi
}

linecount() {
	wc -l "$1"|cut -d' ' -f1
}

filecleanup() {
	#convert file to unix format
	cat -v "$domains_list"|diff -q - "$domains_list" 1> /dev/null || dos2unix "$domains_list"

	#check for trailing spaces and remove them
	grep -qr '[[:blank:]]$' "$domains_list" && ( sed -i 's/[[:space:]]\+$//' "$domains_list" && echo -e "${yellow}[Cleanup]${nc} Removed trailing whitespaces from $domains_list" )

	#check for empty lines and remove them
	grep -qc '^$' "$domains_list" && sed -i '/^$/d' "$domains_list" && echo -e "${yellow}[Cleanup]${nc} Removed blank lines from $domains_list"

	#check if the file is sorted properly if not, do so
	sort --check=quiet "$domains_list" || ( sort "$domains_list" --output "$domains_list" && echo -e "${yellow}[Cleanup]${nc} Sorted $domains_list" )

	#check for dupes and remove them
	uniques=$(uniq -cd "$domains_list")
	if [[ ! -z "$uniques" ]]
	then
		sort --unique "$domains_list" --output "$domains_list"
		echo "$uniques" >> duplicate_domains.txt
		echo -e "${yellow}[Cleanup]${nc} Removed duplicates: $(linecount duplicate_domains.txt) (see $output_dir/duplicate_domains.txt for a list)"
	fi

}

fetch_dns_records() {
	declare recordtype="$1" domains_list="$2"

	if [[ ! -e fetch_"$recordtype"_result.txt ]]; then
		echo "Scanning $(linecount "$domains_list") domains for $recordtype records..."
		echo
		counter=0
		while IFS= read -r domain
		do
			if [[ "$counter" == 100 ]]; then
				echo Procesing...
				sleep 5
				counter=0
			else
				dig "$recordtype" +tcp +noall +answer "$domain" >> fetch_"$recordtype"_result.txt &
				counter=$((counter+1))
			fi
		done < "$domains_list"
		wait
	else
		echo "Found fetch_${recordtype}_result.txt, using as cache"
	fi
}

analyse_dns_records () {
	declare recordtype=$1
	case $recordtype in
		NS)
			#check for CNAME NS-records which isn't legitimate DNS per RFC but it does occur in the wild
			grep -q CNAME fetch_NS_result.txt && sed -i -e '/CNAME/{w domains_with_CNAME.txt' -e 'd}' fetch_NS_result.txt
			if [[ -e domains_with_CNAME.txt ]]; then
				echo -e "${red}Warning${nc}: Found $(linecount domains_with_CNAME.txt) domains with a CNAME for NS. You should fix this! https://tools.ietf.org/html/rfc2181 #10.3"
				echo "Not doing any further processing on them. Removed them from the list and stored them in domains_with_CNAME.txt"
				echo
			fi

			while IFS= read -r domain
			do
				if grep -qw "$domain" fetch_NS_result.txt;
				then
					echo "$domain" >> domains_resolving.txt
					while read -r ns;
					do
						echo "$domain" >> domains_hosted_by_"$ns".txt
					done < <(grep "^$domain\." fetch_NS_result.txt|awk '{print $5}'|awk -F. '{print $2}'|sort|uniq);
				else
					echo "$domain" >> domains_non_resolving.txt
					if [[ -e domains_with_CNAME.txt ]];
					then
						#remove CNAMED domains from domains_non_resolving.txt
						while read -r cname_domain;
						do
							sed -i "/$cname_domain/d" domains_non_resolving.txt
						done < <(awk '{print $1}' domains_with_CNAME.txt|uniq|sed 's/.$//')
					fi
				fi
			done < "$domains_list"
			wait

			# check for domains that hosted by nameservers in different domains
			# this could potentially require a DNS change in two (or more) separate places
			while read -r domain;
			do
				if [[ $(wc -l <(grep "^$domain$" domains_hosted_by*|grep -v ':0')|awk '{print $1}') -gt 1 ]]; then
					{
						echo "$domain matched in:";
						grep -l "^$domain$" domains_hosted_by*;
					} >> domains_hosted_in_multipe_nameservers.txt
				fi
			done < domains_resolving.txt

			echo "Nameserver distribution:"
			wc -l domains_hosted_by_*
			echo
			;;

		MX)
			while read -r domain;
			do
				if grep -qw "$domain" fetch_MX_result.txt;
				then
					while read -r mx;
					do
						echo "$domain" >> mail_handled_by_"$mx".txt
						# group all mx-servers by main domain for example if foobar.com has
						# mx1.example.org
						# mx2.example.org
						# foobar.com is stored in mail_handled_by_example.org.txt
					done < <(grep "^$domain\." fetch_MX_result.txt|awk '{print $6}'|rev|cut -d'.' -f2,3|rev|sed 's/\.$//'|uniq);
				fi
			done < domains_resolving.txt

			echo "Mailserver distribution:"
			wc -l mail_handled_by_*
			echo
			;;

		A)
			grep -f "$ipv4_list" fetch_A_result.txt >> domains_aligned.txt
			grep -vf "$ipv4_list" fetch_A_result.txt >> domains_unaligned.txt
			;;

		AAAA)
			grep -f "$ipv6_list" fetch_AAAA_result.txt >> domains_aligned_IPV6.txt
			grep -vf "$ipv6_list" fetch_AAAA_result.txt >> domains_unaligned_IPV6.txt
			;;
	esac
}

ssh_command(){
	ssh "$user"@"$server" "$1"
}

ssh_connect_test(){
	if ssh_command exit; then
		echo -e "${green}[Success]${nc} Connection to $user@$server successful!"
	else
		echo -e "${red}[Failure]${nc} Connection to $user@$server failed!"
		exit 1
	fi
}

fetch_domainlist_from_server() {
	domains_list="$server"-domains.list
	if ssh_command "test -d /usr/local/psa"; then
		plesk_version=$(ssh_command "cut -d' ' -f1 /usr/local/psa/version|cut -d. -f1,2")
		if [[ $plesk_version == "12.5" ]]; then
			ssh_command "plesk bin site --list" > "$domains_list"
		else
			ssh_command "MYSQL_PWD=\$(cat /etc/psa/.psa.shadow) mysql -Ns -u admin -Dpsa -e 'SELECT name FROM domains'" > "$domains_list"
		fi
		echo "Plesk $plesk_version detected"
	elif ssh_command "test -d /usr/local/directadmin"; then
		echo "DirectAdmin detected"
		ssh_command "cat /etc/virtual/domainowners|cut -d: -f1" > "$domains_list"
	elif ssh_command "test -d /var/www/froxlor"; then
		echo "Froxlor detected"
		ssh_command "mysql -Ns -e 'select domain from panel_domains' froxlor" > "$domains_list"
	elif ssh_command "test -d /usr/local/cpanel"; then
		echo "cPanel detected"
		ssh_command "cat /etc/localdomains" > "$domains_list"
	else
		echo -e "${red}[Failure]${nc} CP not supported!"
		exit 1
	fi
	check_file_existence "$domains_list" && echo -e "${green}[Success]${nc} Fetched domainslist from $server"
}


fetch_iplist_from_server() {
	ssh_command "ip -4 -o addr show scope global"|awk '{gsub(/\/.*/,"",$4); print $4}' > "$server"-ipv4.list
	[[ -s "$server"-ipv4.list ]] && echo "Fetched IPv4 address list from $server"
	ssh_command "ip -6 -o addr show scope global"|awk '{gsub(/\/.*/,"",$4); print $4}' > "$server"-ipv6.list
	[[ -s "$server"-ipv6.list ]] && echo "Fetched IPv6 address list from $server"
}

match_WWW_to_non_WWW() {
	echo todo
}

print_summary() {
	echo "==================== Summary ===================="
	echo
	echo "Domains in supplied list: $(linecount "$domains_list")"
	echo
	echo "*** NS-record analysis ***"
	echo "Nameservers in use      : $(find . -type f -name 'domains_hosted_by*.txt'|wc -l)"
	echo -e "Resolving domains       : ${green}$(linecount domains_resolving.txt)${nc}"
	if [[ -e domains_non_resolving.txt ]]; then
		echo -e "Non-resolving domains   : ${red}$(linecount domains_non_resolving.txt)${nc}"
	fi
	if [[ -e "domains_with_CNAME.txt" ]]; then
		echo -e "Domains with a CNAME    : ${red}$(linecount domains_with_CNAME.txt)${nc}"
	fi
	if [[ -e domains_hosted_in_multipe_nameservers.txt ]]; then
		echo -e "Cross-hosted domains    : ${yellow}$(grep -cv domains_hosted_by domains_hosted_in_multipe_nameservers.txt)${nc}"
	fi

	echo

	if [[ $ipv4_list != '' ]]; then
		echo "*** A-record analysis ***";
		if [[ -e domains_aligned.txt ]]; then
			echo -e "Aligned IPV4 domains    : ${green}$(linecount domains_aligned.txt)${nc}"
		fi
		if [[ -e domains_unaligned.txt ]]; then
			echo -e "Unaligned IPV4 domains  : ${red}$(linecount domains_unaligned.txt)${nc}"
		fi
	fi

	if [[ $ipv6_list != '' ]]; then
		echo
		echo "*** AAAA-record analysis***";
		if [[ -e domains_aligned_IPV6.txt ]]; then
			echo -e "Aligned IPV6 domains    : ${green}$(linecount domains_aligned_IPV6.txt)${nc}"
		fi
		if [[ -e domains_unaligned_IPV6.txt ]]; then
			echo -e "Unaligned IPV6 domains  : ${red}$(linecount domains_unaligned_IPV6.txt)${nc}"
		fi
	fi

	#do a checksum
	nstotal=$(cat ./domains_hosted_by_*|sort|uniq|wc -l)
	resolvingtotal=$(linecount domains_resolving.txt)
	if [[ "$nstotal" != "$resolvingtotal" ]]; then
		echo "Checksum not okay, results may be inaccurate!"
	fi
	echo
	echo "Finished! Check your results in: $(basename "$output_dir")"

}

main() {
	make_output_dir "$output_dir"

	if [[ -n "$server" ]]; then
		ssh_connect_test
		fetch_domainlist_from_server
		fetch_iplist_from_server
		if [[ -s "$server"-ipv4.list ]]; then
			ipv4_list="$server"-ipv4.list
		fi
		if [[ -s "$server"-ipv6.list ]]; then
			ipv6_list="$server"-ipv6.list
		fi
	fi

	filecleanup "$domains_list"

	fetch_dns_records NS "$domains_list"

	analyse_dns_records NS

	if [[ ! -z "$ipv4_list" ]]; then
		fetch_dns_records A domains_resolving.txt
		analyse_dns_records A
	fi
	if [[ ! -z "$ipv6_list" ]]; then
		fetch_dns_records AAAA domains_resolving.txt
		analyse_dns_records AAAA
	fi

	fetch_dns_records MX domains_resolving.txt
	analyse_dns_records MX

	print_summary|tee summary.txt

	exit 0
}

#show usage if no parameters are present
[[ $# -eq 0 ]] && usage

#handle parameters
while true; do
	key="$1"
	case "$key" in
		-d|--domainslist)
			domains_list=$(readlink -f -- "$2")
			check_file_existence "$domains_list"
			shift # past argument
			;;
		-i|--ipv4list)
			ipv4_list=$(readlink -f -- "$2")
			check_file_existence "$ipv4_list"
			shift # past argument
			;;
		-6|--ipv6list)
			ipv6_list=$(readlink -f -- "$2")
			check_file_existence "$ipv6_list"
			shift # past argument
			;;
		-o|--output-dir)
			output_dir=$(readlink -f -- "$2")
			shift # past argument
			;;
		-s|--server)
			server="$2"
			shift #past argument
			;;
		-u|--user)
			user="$2"
			shift #past argument
			;;
		-w|--match-www)
			#todo
			shift # past argument
			;;
		-h|--help)
			usage
			;;
		--)
			break
			;;
		*)
			break
			exit 3
	esac
	shift # past argument or value
done

if [[ -n "$server" ]]; then
	main
elif [[ -n "$domains_list" ]]; then
	main
else
	echo "A list of domains or server is required!"
	usage
fi
